{"version":3,"sources":["components/CurrencyChart.tsx","App.tsx","index.tsx"],"names":["CurrencyChart","data","base","currency","useEffect","months","i","date","Date","setMonth","getMonth","push","toLocaleString","month","canvas","document","getElementById","Chart","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","drawChart","id","className","App","useState","currencies","setCurrencies","firstCurrency","secondCurrency","secondCurrencyData","setSecondCurrencyData","fetchCurrencies","then","fetchCurrencyData","a","fetch","response","ok","console","error","json","currencyData","fetchPromises","getFetchCurrencyDataPromises","Promise","all","responsesData","forEach","rates","currentDate","toJSON","slice","url","URL","searchParams","set","toString","ReactDOM","render","StrictMode"],"mappings":"wQAUaA,EAAkC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAa3D,OAZAC,qBAAU,WAGP,IAFA,IAAMC,EAAmB,GAEhBC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACzB,IAAMC,EAAO,IAAIC,KACjBD,EAAKE,SAASF,EAAKG,WAAaJ,GAChCD,EAAOM,KAAKJ,EAAKK,eAAe,UAAW,CAAEC,MAAO,WAY7D,SAAmBZ,EAAgBC,EAAcC,EAAkBE,GAChE,IAAMS,EAAcC,SAASC,eAAe,SAC5C,IAAKF,EAAQ,OAEb,IAAIG,IAAMH,EAAOI,WAAW,MAAO,CAChCC,KAAM,OACNlB,KAAM,CACHmB,OAAQf,EACRgB,SAAU,CAAC,CACRC,MAAM,GAAD,OAAKnB,EAAL,eAAoBD,GACzBD,OACAsB,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,OAtBnBC,CAAUzB,EAAMC,EAAMC,EAAUE,KAChC,CAACJ,EAAMC,EAAMC,IAGb,4BAAQwB,GAAG,QAAQC,UAAU,WClB5B,IAAMC,EAAgB,WAAO,IAAD,EACIC,qBADJ,mBACzBC,EADyB,KACbC,EADa,OAEUF,mBAAiB,OAF3B,mBAEzBG,EAFyB,aAGYH,mBAAiB,QAH7B,mBAGzBI,EAHyB,aAIoBJ,sBAJpB,mBAIzBK,EAJyB,KAILC,EAJK,KAOhChC,qBAAU,Y,2CACPiC,GAAkBC,KAAKN,KACvB,IAEH5B,qBAAU,Y,8CACPmC,CAAkBN,EAAeC,GAC7BI,KAAKF,KACT,CAACH,EAAeC,IAGnB,IAAIhC,EAAO+B,EACP9B,EAAW+B,EAMf,OALIH,IACD7B,EAAQ6B,EAAqCE,GAC7C9B,EAAY4B,EAAqCG,IAIjD,yBAAKN,UAAU,OACZ,kBAAC,EAAD,CACG3B,KAAMkC,EACNjC,KAAMA,EACNC,SAAUA,M,4CAQtB,8BAAAqC,EAAA,sEAG0BC,MAAM,qDAHhC,cAGSC,EAHT,QAIiBC,IACXC,QAAQC,MAAM,4BALpB,SAOgBH,EAASI,OAPzB,cAOG7C,EAPH,yBASUA,GATV,4C,kEAaA,WAAiCC,EAAcC,GAA/C,iBAAAqC,EAAA,6DACSO,EAAyB,GAEzBC,EAAgBC,EAA6B/C,EAAMC,GAH5D,SAKS+C,QAAQC,IAAIH,GAAeV,MAAK,SAACc,GACpCA,EAAcC,SAAQ,SAACpD,GAAD,OAAU8C,EAAapC,KAAKV,EAAKqD,MAAMnD,UANnE,gCASU4C,GATV,4C,sBAaA,SAASE,EAA6B/C,EAAcC,GAGjD,IAFA,IAAM6C,EAAgB,GAEb1C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACzB,IAAMiD,EAAc,IAAI/C,KACxB+C,EAAY9C,SAAS8C,EAAY7C,WAAaJ,GAC9C,IAAMC,EAAOgD,EAAYC,SAASC,MAAM,EAAG,IAErCC,EAAM,IAAIC,IAAI,gDAAkDpD,EAAO,SAC7EmD,EAAIE,aAAaC,IAAI,SAAU,oCAC/BH,EAAIE,aAAaC,IAAI,OAAQ3D,GAC7BwD,EAAIE,aAAaC,IAAI,UAAW1D,GAEhC6C,EAAcrC,KACX8B,MAAMiB,EAAII,YAAYxB,MAAK,SAACI,GAIzB,OAHKA,EAASC,IACXC,QAAQC,MAAM,+BAEVH,EAASI,WAKzB,OAAOE,ECxFVe,IAASC,OACN,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHlD,SAASC,eAAe,W","file":"static/js/main.83f86cf1.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\n\ninterface IProps {\n   data: number[],\n   base: string,\n   currency: string\n}\n\nexport const CurrencyChart: React.FC<IProps> = ({ data, base, currency }) => {\n   useEffect(() => {\n      const months: string[] = []\n\n      for (let i = 0; i < 7; i++) {\n         const date = new Date();\n         date.setMonth(date.getMonth() - i)\n         months.push(date.toLocaleString('default', { month: 'long' }))\n      }\n\n      drawChart(data, base, currency, months)\n   }, [data, base, currency])\n\n   return (\n      <canvas id=\"chart\" className=\"chart\"></canvas>\n   )\n}\n\n\nfunction drawChart(data: number[], base: string, currency: string, months: string[]) {\n   const canvas: any = document.getElementById('chart')\n   if (!canvas) return\n\n   new Chart(canvas.getContext('2d'), {\n      type: 'line',\n      data: {\n         labels: months,\n         datasets: [{\n            label: `${currency} in ${base}`,\n            data,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1\n         }]\n      }\n   })\n}","import React, { useState, useEffect } from 'react';\nimport { TCurrencies } from './typescript-types';\n\nimport { CurrencyChart } from './components/CurrencyChart';\n\n\nexport const App: React.FC = () => {\n   const [currencies, setCurrencies] = useState<TCurrencies>()\n   const [firstCurrency, setFirstCurrency] = useState<string>('USD')\n   const [secondCurrency, setSecondCurrency] = useState<string>('RUB')\n   const [secondCurrencyData, setSecondCurrencyData] = useState<number[]>()\n\n\n   useEffect(() => {\n      fetchCurrencies().then(setCurrencies)\n   }, [])\n\n   useEffect(() => {\n      fetchCurrencyData(firstCurrency, secondCurrency)\n         .then(setSecondCurrencyData)\n   }, [firstCurrency, secondCurrency])\n\n\n   let base = firstCurrency\n   let currency = secondCurrency\n   if (currencies) {\n      base = (currencies as {[key: string]: any} )[firstCurrency]\n      currency = (currencies as {[key: string]: any} )[secondCurrency]\n   }\n\n   return (\n      <div className=\"app\">\n         <CurrencyChart\n            data={secondCurrencyData as number[]}\n            base={base}\n            currency={currency}\n         />\n      </div>\n   );\n}\n\n\n\nasync function fetchCurrencies() {\n   let data: TCurrencies\n\n   const response = await fetch('https://openexchangerates.org/api/currencies.json')\n   if (!response.ok) {\n      console.error('Error loading currencies')\n   }\n   data = await response.json()\n\n   return data\n}\n\n\nasync function fetchCurrencyData(base: string, currency: string) {\n   const currencyData: number[] = []\n\n   const fetchPromises = getFetchCurrencyDataPromises(base, currency)\n\n   await Promise.all(fetchPromises).then((responsesData) => {\n      responsesData.forEach((data) => currencyData.push(data.rates[currency]))\n   })\n\n   return currencyData\n}\n\n\nfunction getFetchCurrencyDataPromises(base: string, currency: string): Promise<any>[] {\n   const fetchPromises = [] as Promise<any>[]\n\n   for (let i = 0; i < 7; i++) {\n      const currentDate = new Date()\n      currentDate.setMonth(currentDate.getMonth() - i)\n      const date = currentDate.toJSON().slice(0, 10)\n\n      const url = new URL('https://openexchangerates.org/api/historical/' + date + '.json')\n      url.searchParams.set('app_id', '814335798c7149bfb3caad3be6e1acb2')\n      url.searchParams.set('base', base)\n      url.searchParams.set('symbols', currency)\n\n      fetchPromises.push(\n         fetch(url.toString()).then((response) => {\n            if (!response.ok) {\n               console.error('Error loading currency data')\n            }\n            return response.json()\n         })\n      )\n   }\n\n   return fetchPromises\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}