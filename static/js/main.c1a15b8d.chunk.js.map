{"version":3,"sources":["components/CurrencyChart.tsx","components/Title.tsx","components/Calculator.tsx","components/Select.tsx","App.tsx","index.tsx"],"names":["CurrencyChart","base","currency","currencyData","useState","chart","setChart","useEffect","window","onresize","resize","destroy","canvas","document","getElementById","months","i","date","Date","setMonth","getMonth","push","toLocaleString","month","Chart","getContext","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","drawChart","className","id","Title","rate","Calculator","baseValue","setBaseValue","currencyValue","setCurrencyValue","toString","value","onChange","event","validateInput","currentTarget","autoFocus","input","isNaN","slice","length","Select","currenciesNames","handleBaseChange","handleCurrencyChange","baseSelect","querySelector","currencySelect","Object","entries","sort","a","b","forEach","shortName","fullName","baseOption","createElement","textContent","currencyOption","cloneNode","selected","append","App","setCurrencies","setBase","setCurrency","setCurrencyData","newBase","fetchCurrencyData","newCurrency","fetchCurrenciesNames","then","baseFullName","currencyFullName","currentRate","fetch","response","ok","console","error","json","fetchPromises","getFetchCurrencyDataPromises","Promise","all","responsesData","rates","reverse","currentDate","toJSON","url","URL","searchParams","set","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c1a15b8d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Chart from 'chart.js'\n\n\ninterface IProps {\n   currencyData: number[],\n   base: string,\n   currency: string\n}\n\nexport const CurrencyChart: React.FC<IProps> = ({ base, currency, currencyData }) => {\n   const [chart, setChart] = useState<Chart>()\n\n   useEffect(() => {\n      window.onresize = () => chart?.resize()\n   })\n\n   useEffect(() => {\n      chart?.destroy()\n      setChart( drawChart(base, currency, currencyData) )\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [base, currency, currencyData])\n\n   return (\n      <div className=\"chart\">\n         <canvas id=\"chart\"></canvas>\n      </div>\n   )\n}\n\n\nfunction drawChart(base: string, currency: string, currencyData: number[]) {\n   const canvas: any = document.getElementById('chart')\n   if (!canvas) return\n\n   const months: string[] = []\n   for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setMonth(date.getMonth() - i)\n      months.push(date.toLocaleString('default', { month: 'long' }))\n   }\n\n   return new Chart(canvas.getContext('2d'), {\n      type: 'line',\n      data: {\n         labels: months,\n         datasets: [{\n            label: `${currency} in ${base}`,\n            data: currencyData,\n            backgroundColor: 'rgba(0, 0, 0, 0.4)',\n            borderColor: '#4E4E4E',\n            borderWidth: 3\n         }]\n      }\n   })\n}","import React from 'react'\n\ninterface IProps {\n   base: string,\n   currency: string,\n   rate: number | null\n}\n\nexport const Title: React.FC<IProps> = ({ base, currency, rate }) => (\n   <>\n      <div className=\"subtitle\">1 {base} equals</div>\n      <div className=\"title\">{rate} {currency}</div>\n   </>\n)","import React, { useState, useEffect } from 'react'\n\n\nexport const Calculator: React.FC<{ rate: number }> = ({ rate }) => {\n   const [baseValue, setBaseValue] = useState<string>('1')\n   const [currencyValue, setCurrencyValue] = useState<string>('')\n\n   useEffect(() => {\n      if (!rate) return\n      setBaseValue('1')\n      setCurrencyValue((1 * rate).toString())\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [rate])\n\n   function handleBaseChange(event: React.FormEvent<HTMLInputElement>): void {\n      const value = validateInput(event.currentTarget.value)\n      setBaseValue(value)\n      setCurrencyValue( validateInput((+value * rate).toString()) )\n   }\n\n   function handleCurrencyChange(event: React.FormEvent<HTMLInputElement>): void {\n      const value = validateInput(event.currentTarget.value)\n      setCurrencyValue(value)\n      setBaseValue( validateInput((+value / rate).toString()) )\n   }\n\n   return (\n      <tr className=\"calculator\">\n         <td>\n            <input\n               className=\"calculator__base\"\n               value={baseValue}\n               onChange={handleBaseChange}\n               type=\"text\"\n               autoFocus\n            />\n         </td>\n         <td className=\"spacing\"></td>\n         <td>\n            <input\n               className=\"calculator__currency\"\n               value={currencyValue}\n               onChange={handleCurrencyChange}\n               type=\"text\"\n            />\n         </td>\n      </tr>\n   )\n}\n\n\nfunction validateInput(input: string): string {\n   if (!isNaN(+input.slice(0, input.length - 1)) && input[input.length - 1] === 'e') {\n      return input\n   }\n\n   while (isNaN(+input)) {\n      input = input.slice(0, input.length - 1)\n   }\n\n   return input\n}","import React, { useEffect } from 'react'\nimport { ICurrenciesNames } from '../typescript-types'\n\ninterface IProps {\n   currenciesNames: ICurrenciesNames | undefined\n   base: string,\n   currency: string,\n   handleBaseChange: (event: React.FormEvent<HTMLSelectElement>) => void,\n   handleCurrencyChange: (newCevent: React.FormEvent<HTMLSelectElement>) => void\n}\n\nexport const Select: React.FC<IProps> = ({ currenciesNames, base, currency, handleBaseChange, handleCurrencyChange }) => {\n   useEffect(() => {\n      if (!currenciesNames) return\n\n      const baseSelect = document.querySelector('.select__base')\n      const currencySelect = document.querySelector('.select__currency')\n\n      // sorting by full name\n      const currenciesNamesArray = Object.entries(currenciesNames).sort((a, b) => a[1] > b[1] ? 1: -1)\n\n      currenciesNamesArray.forEach( ([shortName, fullName]) => {\n         const baseOption = document.createElement('option')\n         baseOption.value = shortName\n         baseOption.textContent = fullName.toString()\n         const currencyOption = baseOption.cloneNode(true) as HTMLOptionElement\n\n         if (base === shortName) {\n            baseOption.selected = true\n         }\n         if (currency === shortName) {\n            currencyOption.selected = true\n         }\n\n         // baseSelect?.append(baseOption) <== paid api version required\n         currencySelect?.append(currencyOption)\n      })\n\n      const baseOption = document.createElement('option')\n      baseOption.value = base\n      baseOption.textContent = currenciesNames[base]\n      baseSelect?.append(baseOption)\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [currenciesNames])\n\n\n   return (\n      <tr className=\"select\">\n         <td><select className=\"select__base\" onChange={handleBaseChange}></select></td>\n         <td className=\"spacing\"></td>\n         <td><select className=\"select__currency\" onChange={handleCurrencyChange}></select></td>\n      </tr>\n   )\n}","import React, { useState, useEffect } from 'react';\nimport { ICurrenciesNames } from './typescript-types';\n\nimport './scss/style.scss';\n\nimport { CurrencyChart } from './components/CurrencyChart';\nimport { Title } from './components/Title';\nimport { Calculator } from './components/Calculator';\nimport { Select } from './components/Select';\n\n\nexport const App: React.FC = () => {\n   const [currenciesNames, setCurrencies] = useState<ICurrenciesNames>()\n   const [base, setBase] = useState<string>('USD')\n   const [currency, setCurrency] = useState<string>('RUB')\n   const [currencyData, setCurrencyData] = useState<number[]>()\n\n\n   useEffect(() => {\n      fetchCurrenciesNames().then(setCurrencies)\n   }, [])\n\n   useEffect(() => {\n      fetchCurrencyData(base, currency)\n         .then(setCurrencyData)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [])\n\n\n   async function handleBaseChange(event: React.FormEvent<HTMLSelectElement>) {\n      const newBase = event.currentTarget.value\n\n      const data = await fetchCurrencyData(newBase, currency)\n      setCurrencyData(data)\n\n      setBase(newBase)\n      if (newBase === currency) {\n         setCurrency(base)\n      }\n   }\n   async function handleCurrencyChange(event: React.FormEvent<HTMLSelectElement>) {\n      const newCurrency = event.currentTarget.value\n\n      const data = await fetchCurrencyData(base, newCurrency)\n      setCurrencyData(data)\n\n      setCurrency(newCurrency)\n      // paid api version required\n      // if (newCurrency === base) {\n      //    setBase(currency)\n      // }\n   }\n\n\n   const baseFullName = currenciesNames ? currenciesNames[base] : base\n   const currencyFullName = currenciesNames ? currenciesNames[currency] : currency\n\n   const currentRate = currencyData ? currencyData[currencyData.length - 1] : null\n\n   return (\n      <div className=\"app\">\n         <div className=\"content\">\n            <Title\n               base={baseFullName}\n               currency={currencyFullName}\n               rate={currentRate}\n            />\n            <table><tbody>\n               <Calculator rate={currentRate as number} />\n               <Select\n                  currenciesNames={currenciesNames}\n                  base={base}\n                  currency={currency}\n                  handleBaseChange={handleBaseChange}\n                  handleCurrencyChange={handleCurrencyChange}\n               />\n            </tbody></table>\n         </div>\n         <CurrencyChart\n            currencyData={currencyData as number[]}\n            base={baseFullName}\n            currency={currencyFullName}\n         />\n      </div>\n   );\n}\n\n\n\nasync function fetchCurrenciesNames(): Promise<ICurrenciesNames> {\n   let data: ICurrenciesNames\n\n   const response = await fetch('https://openexchangerates.org/api/currencies.json')\n   if (!response.ok) {\n      console.error('Error loading currencies names')\n   }\n   data = await response.json()\n\n   return data\n}\n\n\nasync function fetchCurrencyData(base: string, currency: string): Promise<number[]> {\n   const currencyData: number[] = []\n\n   const fetchPromises = getFetchCurrencyDataPromises(base, currency)\n\n   await Promise.all(fetchPromises).then((responsesData) => {\n      responsesData.forEach((data) => currencyData.push(data.rates[currency]))\n   })\n\n   return currencyData.reverse()\n}\n\n\nfunction getFetchCurrencyDataPromises(base: string, currency: string): Promise<any>[] {\n   const fetchPromises = [] as Promise<any>[]\n\n   for (let i = 0; i < 7; i++) {\n      const currentDate = new Date()\n      currentDate.setMonth(currentDate.getMonth() - i)\n      const date = currentDate.toJSON().slice(0, 10)\n\n      const url = new URL('https://openexchangerates.org/api/historical/' + date + '.json')\n      url.searchParams.set('app_id', 'e785e47f3cc94b4bbcf8ec131d31a076')\n      url.searchParams.set('base', base)\n      url.searchParams.set('symbols', currency)\n\n      fetchPromises.push(\n         fetch(url.toString()).then((response) => {\n            if (!response.ok) {\n               console.error('Error loading currency data')\n            }\n            return response.json()\n         })\n      )\n   }\n\n   return fetchPromises\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}