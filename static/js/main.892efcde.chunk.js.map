{"version":3,"sources":["components/CurrencyChart.tsx","components/Title.tsx","components/Calculator.tsx","components/Select.tsx","App.tsx","index.tsx"],"names":["CurrencyChart","data","base","currency","useEffect","months","i","date","Date","setMonth","getMonth","push","toLocaleString","month","canvas","document","getElementById","Chart","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","drawChart","id","className","Title","rate","Calculator","useState","baseValue","setBaseValue","currencyValue","setCurrencyValue","toString","value","onChange","event","validateInput","currentTarget","autoFocus","input","isNaN","slice","length","Select","currencies","handleBaseChange","handleCurrencyChange","baseSelect","querySelector","currencySelect","Object","entries","sort","a","b","forEach","shortName","fullName","baseOption","createElement","textContent","currencyOption","cloneNode","selected","append","App","setCurrencies","setBase","setCurrency","currencyData","setSecondCurrencyData","fetchCurrencies","then","fetchCurrencyData","currentRate","baseFullName","currencyFullName","fetch","response","ok","console","error","json","fetchPromises","getFetchCurrencyDataPromises","Promise","all","responsesData","rates","reverse","currentDate","toJSON","url","URL","searchParams","set","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.892efcde.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport Chart from 'chart.js'\n\n\ninterface IProps {\n   data: number[],\n   base: string,\n   currency: string\n}\n\nexport const CurrencyChart: React.FC<IProps> = ({ data, base, currency }) => {\n   useEffect(() => {\n      const months: string[] = []\n\n      for (let i = 6; i >=0; i--) {\n         const date = new Date();\n         date.setMonth(date.getMonth() - i)\n         months.push(date.toLocaleString('default', { month: 'long' }))\n      }\n\n      drawChart(data, base, currency, months)\n   }, [data, base, currency])\n\n   return (\n      <canvas id=\"chart\" className=\"chart\"></canvas>\n   )\n}\n\n\nfunction drawChart(data: number[], base: string, currency: string, months: string[]) {\n   const canvas: any = document.getElementById('chart')\n   if (!canvas) return\n\n   new Chart(canvas.getContext('2d'), {\n      type: 'line',\n      data: {\n         labels: months,\n         datasets: [{\n            label: `${currency} in ${base}`,\n            data,\n            backgroundColor: 'rgba(0, 0, 0, 0.4)',\n            borderColor: '#4E4E4E',\n            borderWidth: 3\n         }]\n      }\n   })\n}","import React from 'react'\n\ninterface IProps {\n   base: string,\n   currency: string,\n   rate: number\n}\n\nexport const Title: React.FC<IProps> = ({ base, currency, rate }) => (\n   <div className=\"title\">\n      <h2 className=\"title__small\">1 {base} equals</h2>\n      <h1 className=\"title__big\">{rate} {currency}</h1>\n   </div>\n)","import React, { useState, useEffect } from 'react'\n\n\nexport const Calculator: React.FC<{ rate: number }> = ({ rate }) => {\n   const [baseValue, setBaseValue] = useState<string>('1')\n   const [currencyValue, setCurrencyValue] = useState<string>('')\n\n   useEffect(() => {\n      if (!rate) return\n      setBaseValue('1')\n      setCurrencyValue((1 * rate).toString())\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [rate])\n\n   function handleBaseChange(event: React.FormEvent<HTMLInputElement>): void {\n      const value = validateInput(event.currentTarget.value)\n      setBaseValue(value)\n      setCurrencyValue(validateInput((+value * rate).toString()))\n   }\n\n   function handleCurrencyChange(event: React.FormEvent<HTMLInputElement>): void {\n      const value = validateInput(event.currentTarget.value)\n      setCurrencyValue(value)\n      setBaseValue(validateInput((+value / rate).toString()))\n   }\n\n   return (\n      <tr className=\"calculator\">\n         <td>\n            <input\n               className=\"calculator__base\"\n               value={baseValue}\n               onChange={handleBaseChange}\n               type=\"text\"\n               autoFocus\n            />\n         </td>\n         <td>\n            <input\n               className=\"calculator__currency\"\n               value={currencyValue}\n               onChange={handleCurrencyChange}\n               type=\"text\"\n            />\n         </td>\n      </tr>\n   )\n}\n\n\nfunction validateInput(input: string): string {\n   if (!isNaN(+input.slice(0, input.length - 1)) && input[input.length - 1] === 'e') {\n      return input\n   }\n\n   while (isNaN(+input)) {\n      input = input.slice(0, input.length - 1)\n   }\n\n   return input\n}","import React, { useEffect } from 'react'\nimport { TCurrencies } from '../typescript-types'\n\ninterface IProps {\n   currencies: TCurrencies\n   base: string,\n   currency: string,\n   handleBaseChange: (event: React.FormEvent<HTMLSelectElement>) => void,\n   handleCurrencyChange: (newCevent: React.FormEvent<HTMLSelectElement>) => void\n}\n\nexport const Select: React.FC<IProps> = ({ currencies, base, currency, handleBaseChange, handleCurrencyChange }) => {\n   useEffect(() => {\n      if (!currencies) return\n\n      const baseSelect = document.querySelector('.select__base')\n      const currencySelect = document.querySelector('.select__currency')\n\n      const currenciesArray = Object.entries(currencies).sort((a, b) => a[1] > b[1] ? 1: -1)\n\n      currenciesArray.forEach( ([shortName, fullName]) => {\n         const baseOption = document.createElement('option')\n         baseOption.value = shortName\n         baseOption.textContent = fullName.toString()\n         const currencyOption = baseOption.cloneNode(true) as HTMLOptionElement\n\n         if (base === shortName) {\n            baseOption.selected = true\n         }\n         if (currency === shortName) {\n            currencyOption.selected = true\n         }\n         //paid api version required\n         //baseSelect?.append(baseOption)\n         currencySelect?.append(currencyOption)\n      })\n\n      const baseOption = document.createElement('option')\n      baseOption.value = base\n      baseOption.textContent = (currencies as { [key: string]: any })[base]\n      baseSelect?.append(baseOption)\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [currencies])\n\n\n   return (\n      <tr className=\"select\">\n         <td><select className=\"select__base\" onChange={handleBaseChange}></select></td>\n         <td><select className=\"select__currency\" onChange={handleCurrencyChange}></select></td>\n      </tr>\n   )\n}","import React, { useState, useEffect } from 'react';\nimport { TCurrencies } from './typescript-types';\n\nimport './scss/style.scss';\n\nimport { CurrencyChart } from './components/CurrencyChart';\nimport { Title } from './components/Title';\nimport { Calculator } from './components/Calculator';\nimport { Select } from './components/Select';\n\n\nexport const App: React.FC = () => {\n   const [currencies, setCurrencies] = useState<TCurrencies>()\n   const [base, setBase] = useState<string>('USD')\n   const [currency, setCurrency] = useState<string>('RUB')\n   const [currencyData, setSecondCurrencyData] = useState<number[]>()\n\n\n   useEffect(() => {\n      fetchCurrencies().then(setCurrencies)\n   }, [])\n\n   useEffect(() => {\n      fetchCurrencyData(base, currency)\n         .then(setSecondCurrencyData)\n   }, [base, currency])\n\n\n   function handleBaseChange(event: React.FormEvent<HTMLSelectElement>): void {\n      if (event.currentTarget.value === currency) {\n         setCurrency(base)\n      }\n      setBase(event.currentTarget.value)\n   }\n   function handleCurrencyChange(event: React.FormEvent<HTMLSelectElement>): void {\n      if (event.currentTarget.value === base) {\n         setBase(currency)\n      }\n      setCurrency(event.currentTarget.value)\n   }\n\n\n   let baseFullName = base\n   let currencyFullName = currency\n   if (currencies) {\n      baseFullName = (currencies as { [key: string]: any })[base]\n      currencyFullName = (currencies as { [key: string]: any })[currency]\n   }\n\n   let currentRate\n   if (currencyData) {\n      currentRate = currencyData[currencyData.length - 1]\n   }\n\n   return (\n      <div className=\"app\">\n         <Title\n            base={baseFullName}\n            currency={currencyFullName}\n            rate={currentRate as number}\n         />\n         <table><tbody>\n            <Calculator rate={currentRate as number} />\n            <Select\n               currencies={currencies as TCurrencies}\n               base={base}\n               currency={currency}\n               handleBaseChange={handleBaseChange}\n               handleCurrencyChange={handleCurrencyChange}\n            />\n         </tbody></table>\n         <CurrencyChart\n            data={currencyData as number[]}\n            base={baseFullName}\n            currency={currencyFullName}\n         />\n      </div>\n   );\n}\n\n\n\nasync function fetchCurrencies() {\n   let data: TCurrencies\n\n   const response = await fetch('https://openexchangerates.org/api/currencies.json')\n   if (!response.ok) {\n      console.error('Error loading currencies')\n   }\n   data = await response.json()\n\n   return data\n}\n\n\nasync function fetchCurrencyData(base: string, currency: string) {\n   const currencyData: number[] = []\n\n   const fetchPromises = getFetchCurrencyDataPromises(base, currency)\n\n   await Promise.all(fetchPromises).then((responsesData) => {\n      responsesData.forEach((data) => currencyData.push(data.rates[currency]))\n   })\n\n   return currencyData.reverse()\n}\n\n\nfunction getFetchCurrencyDataPromises(base: string, currency: string): Promise<any>[] {\n   const fetchPromises = [] as Promise<any>[]\n\n   for (let i = 0; i < 7; i++) {\n      const currentDate = new Date()\n      currentDate.setMonth(currentDate.getMonth() - i)\n      const date = currentDate.toJSON().slice(0, 10)\n\n      const url = new URL('https://openexchangerates.org/api/historical/' + date + '.json')\n      url.searchParams.set('app_id', '814335798c7149bfb3caad3be6e1acb2')\n      url.searchParams.set('base', base)\n      url.searchParams.set('symbols', currency)\n\n      fetchPromises.push(\n         fetch(url.toString()).then((response) => {\n            if (!response.ok) {\n               console.error('Error loading currency data')\n            }\n            return response.json()\n         })\n      )\n   }\n\n   return fetchPromises\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}